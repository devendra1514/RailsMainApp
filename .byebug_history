exit
required_params
continue
c
nested_value
params[nested_key]
nested_value
nested_key
nested_value
nestet_value
nested_key
continue
params[nested_key]
params[nested_key].nil?
nested_value
nested_key
key
params
continue
key
params
n
key.is_a?(Hash)
key
params
continue
n
params
param
c
key
params[key]
continue
required_params.flat_map
continue
advance_params.each { |item| puts(item) } || nil
advance_params.each { |item| puts(item) } | nil
advance_params.each { |item| puts(item) } |nil
advance_params.each { |item| puts(item) }
advance_params.each { |item| puts(item[0]) }
advance_params.each { |item| item[0] }
advance_params.each { |item| item }
advance_params.each { |item| item|
advance_params.map { |item|  }
advance_params.map { |item| item }
advance_params.map { |item| {item} }
advance_params.map { |item| item }
advance_params.each { |item| puts item }
advance_params.each { |item| putsitem }
advance_params.each { |item| item }
advance_params[0]
advance_params
advance_params.flat_map { |item| item[0] }
advance_params.flat_map { |item| item }
advance_params.each { |item| puts(item) }
data = advance_params.each { |item| puts(item) }
data = advance_params.each { |item| item[0] }
data = advance_params.each { |item| item }
data
data = advance_params.map { |item| item }
advance_params.map { |item| item }
advance_params.flat_map { |item| item }
advance_params.flat_map { |item| puts(item) }
advance_params
advance_params.each { |item| item }
advance_params.flat_map { |item| item }
advance_params.flat_map { |item| item| 
advance_params.flat_map
advance_params.to_h
advance_params.to_s
advance_params
serialize_data
serialize_data,
continue
advance_params
*advance_params
advance_params
serialize_data
serialize_data,
continue
AdminUser.where("email ILIKE %?%", params[:email_search])
AdminUser.where("email LIKE %?%", "%#{params[:email_search]}%")
AdminUser.where("email LIKE ?", "%#{params[:query]}%")
AdminUser.all
AdminUser.where("email ILIKE 1")
AdminUser.where("email LIKE 1")
AdminUser.where("email LIKE ?", '1')
AdminUser.where("email ILIKE ?", '1')
AdminUser.where("email ILIKE ?", params[:email_search])
AdminUser.where("email ILIKE ?", params[:email_search])\
dminUser.where("email ILIKE ?", params[:email_search])
params[:email_search]
params
continue
@pagy
@Pay
n
continue
serialize_data.to_hash.merge(message: "Hello")
continue
serialize_data.to_hash.merge(message: "Hello")
serialize_data.to_hash
serialize_data.to_json
serialize_data.parse
JSON.parse serialize
serialize_data
continue
JSON.parse(serialize_data.to_json).merge(message: "HELLO")
JSON.parse(serialize_data.to_json).merge
JSON.parse(serialize_data.to_json)
JSON.parse(serialize_data)
serialize_data.to_json.merge
serialize_data.to_json
serialize_data.methods
continue
serialize_data.methods
serialize_data.add
serialize_data
continue
param
continue
"#{chain}=>#{nested_key}"
nested_key
continue
chain
continue
"#{chain}=>#{nested_key}"
nested_key
continue
nested_key
key
continue
{:meta=>[{:full_name=>[:first_name, :last_name]}]}.flat_map
{:meta=>[{:full_name=>[:first_name, :last_name]}}.flat_map
{:meta=>[{:full_name=>[:first_name, :last_name]}.flat_map
required_params.flat_map
required_params
required_params.is_a?(Hash)
continue
key
continue
key
continue
params
key
continue
params
item
continue
params
continue
item
continue
item
continue
item
continue
key.any? { |nested_key, nested_value| print("-----", nested_key, nested_value, "-----") }
key
continue
key.any? { |nested_key, nested_value| print("-----", nested_key, nested_value, "-----") }
key.any? { |nested_key, nested_value| print("-----", nested_key, nested_value, "-----) }
key.any? { |nested_key, nested_value| puts(nested_key, nested_value) }
key.any? { |nested_key, nested_value| byebug }
key
continue
key
key.is_a?(Hash)
params
key
continue
key
continue
@@error_messages
continue
chain
continue
chain
continue
key
continue
key
continue
key
continue
key
continue
key
continue
key
continue
key
params
paramss
param
continue
param
continue
param
params
continue
param
continue
params
key
continue
n
key.is_a?(Hash)
params
paras
key
continue
key
params
key
continue
n
key
key.is_a?(Hash)
if key.is_a?(Hash)
params
key
continue
key
params
continue
key
params
continue
key
params
params[key.to_sym].nil?
params[key.to_s].nil?
params[key].nil?
n
key.is_a?(Array)
n
key.is_a?(Hash)
key
continue
key
continue
key
continue
key
continue
key
continue
key.is_a?(Hash)
key
continue
key
n
key.is_a?(Array)
n
key
